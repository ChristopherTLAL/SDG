<div class="e-card playing">
  <div class="image"></div>
  <div class="wave"></div>
  <div class="wave"></div>
  <div class="wave"></div>
</div>

<style>
  .e-card {
    background: #1a1a1a; /* A dark fallback background */
    box-shadow: 0px 8px 28px -9px rgba(0,0,0,0.45);
    position: relative;
    aspect-ratio: 3 / 2; 
    width: 100%;
    border-radius: 16px;
    overflow: hidden;
  }
  
  .wave {
    position: absolute;
    width: 190%;
    height: 300%;
    opacity: 0.6;
    left: 0;
    top: 0;
    margin-left: -50%;
    margin-top: -90%;
    /* The background is now set by the script */
  }

  .wave:nth-child(2),
  .wave:nth-child(3) {
    top: 170%;
  }

  .playing .wave {
    border-radius: 40%;
    animation: wave 5s infinite linear;
  }

  .wave {
    border-radius: 40%;
    animation: wave 55s infinite linear;
  }

  .playing .wave:nth-child(2) {
    animation-duration: 10s;
  }

  .wave:nth-child(2) {
    animation-duration: 5s;
  }

  .playing .wave:nth-child(3) {
    animation-duration: 9s;
  }

  .wave:nth-child(3) {
    animation-duration: 1s;
  }

  @keyframes wave {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    // =======================================================
    // === 你可以控制的“艺术参数” (The "Artistic Parameters" You Can Control) ===
    // =======================================================

    // 1. 饱和度 (Saturation): 0-100. 越高颜色越鲜艳.
    const SATURATION = 90; // 推荐 70-100 之间

    // 2. 亮度 (Lightness): 0-100. 这是你主要想控制的参数.
    const LIGHTNESS = 70; // 50 是最纯的颜色, 65 会更亮、更柔和

    // 3. 透明度 (Alpha): 0-1. 控制波浪的透明度.
    const ALPHA = 0.9;

    // 4. 色相分离度: 0-360. 渐变中两个颜色的距离，值越大颜色反差越大.
    const HUE_SEPARATION = 90; // 60 度是一个很和谐的邻近色

    // =======================================================

    const cards = document.querySelectorAll('.e-card');

    cards.forEach(card => {
      // --- Generate a random color palette using HSL ---
      const baseHue = Math.random() * 360; // 随机选择一个基础色相
      const secondHue = (baseHue + HUE_SEPARATION) % 360; // 计算第二个相关色相

      // 使用 hsla() 格式创建颜色字符串
      const color1 = `hsla(${baseHue}, ${SATURATION}%, ${LIGHTNESS}%, ${ALPHA})`;
      const color2 = `hsla(${secondHue}, ${SATURATION}%, ${LIGHTNESS}%, ${ALPHA})`;

      const randomGradient = `linear-gradient(744deg, ${color1}, ${color2} 60%)`;

      const waves = card.querySelectorAll('.wave');
      waves.forEach(wave => {
        wave.style.background = randomGradient;
      });

      // --- Apply a random animation start time (logic remains the same) ---
      waves.forEach(wave => {
        const style = window.getComputedStyle(wave);
        const durationString = style.animationDuration;
        
        let durationMs = 0;
        if (durationString.endsWith('ms')) {
          durationMs = parseFloat(durationString);
        } else if (durationString.endsWith('s')) {
          durationMs = parseFloat(durationString) * 1000;
        }

        if (durationMs > 0) {
          const randomDelay = Math.random() * durationMs;
          wave.style.animationDelay = `-${randomDelay}ms`;
        }
      });
    });
  });
</script>